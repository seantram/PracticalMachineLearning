install.packages("lattice", "ggplot")
install.packages("ggplot2")
install.packages("caret")
install.packages("plyr")
setwd("D:\\OneDrive\\Coursera\\Data Science\\Practical Machine Learning")
data <- read.csv("pml-training.csv", na.strings=c("NA","","#DIV/0!"), strip.white=TRUE)
data <- subset( data, select = -c(X, user_name, raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp ) )
data2 <- data[, colMeans(is.na(data)) <= .50]
set.seed(123)
inTrain  <- createDataPartition(y=data2$classe, p=0.6, list=FALSE)
training <- data2[inTrain,]
testing  <- data2[-inTrain,]
library(caret)
set.seed(123)
inTrain  <- createDataPartition(y=data2$classe, p=0.6, list=FALSE)
training <- data2[inTrain,]
testing  <- data2[-inTrain,]
inTrain  <- createDataPartition(y=data2$classe, p=0.7, list=FALSE)
training <- data2[inTrain,]
testing  <- data2[-inTrain,]
library(gbm)
fitControl <- trainControl( method = "repeatedcv", number = 10, repeats = 10)
set.seed(456)
gbmModel <- train(classe ~ ., data = training,
method = "gbm",
trControl = fitControl,
verbose = FALSE)
library(plyr)
library(gbm)
fitControl <- trainControl( method = "repeatedcv", number = 5 )#, repeats = 10)
set.seed(456)
gbmModel <- train(classe ~ ., data = training, method = "gbm", trControl = fitControl,
verbose = FALSE)
fitControl <- trainControl( method = "cv", number = 1 )#, repeats = 10)
set.seed(456)
gbmModel <- train(classe ~ ., data = training, method = "gbm", trControl = fitControl,
verbose = FALSE)
fitControl <- trainControl( method = "cv", number = 1 )#, repeats = 10)
set.seed(456)
gbmModel <- train(classe ~ ., data = training, method = "gbm", trControl = fitControl,
verbose = FALSE)
fitControl <- trainControl( cv.folds = 2, n.cores = 4 )#, repeats = 10)
fitControl <- trainControl( method = "cv", number = 1 )#, repeats = 10)
set.seed(456)
gbmModel <- train(classe ~ ., data = training, method = "gbm", trControl = fitControl,
verbose = FALSE)
fitControl <- trainControl( method = "cv", number = 2 )#, repeats = 10)
set.seed(456)
gbmModel <- train(classe ~ ., data = training, method = "gbm", trControl = fitControl,
verbose = FALSE)
gbmFit1
gbmModel
fitControl <- trainControl( method = "cv", number = 5 )#, repeats = 10)
set.seed(456)
gbmModel <- train(classe ~ ., data = training, method = "gbm", trControl = fitControl,
verbose = FALSE)
trellis.par.set(caretTheme())
plot(gbmModel)
trellis.par.set(caretTheme())
plot(gbmModel, metric = "Kappa")
fitControl <- trainControl( method = "cv", number = 4, allowParallel=TRUE)
gbmGrid    <-  expand.grid(interaction.depth = c(3, 5), n.trees = c(150, 200), shrinkage = 0.1)
set.seed(456)
gbmModel <- train(classe ~ ., data = training, method = "gbm", trControl = fitControl,
verbose = FALSE, tuneGrid = gbmGrid)
trellis.par.set(caretTheme())
plot(gbmModel)
fitControl <- trainControl( method = "cv", number = 5, allowParallel=TRUE)
set.seed(456)
gbmModel <- train(classe ~ ., data = training, method = "gbm", trControl = fitControl,
verbose = FALSE)
trellis.par.set(caretTheme())
plot(gbmModel)
gbmModel
trellis.par.set(caretTheme())
plot(gbmModel, metric = "Kappa")
install.packages("doParallel")
library(doParallel)
cl <- makeCluster(detectCores())
registerDoParallel(cl)
cl
fitControl <- trainControl( method = "cv", number = 5, allowParallel=TRUE)
set.seed(456)
gbmModel <- train(classe ~ ., data = training, method = "gbm", trControl = fitControl,
verbose = FALSE)
trellis.par.set(caretTheme())
plot(gbmModel)
prediction <- predict(gbmModel, testing)
confusionMatrix <- confusionMatrix(prediction, testing$classe)
confusionMatrix
plot(varImp (gbmModel , scale = FALSE), top = 20)
plot(varImp (gbmModel , scale = TRUE), top = 10)
plot(varImp(gbmModel), top = 10)
View(data2)
cl
set.seed(456)
rfModel <- train(classe ~ ., data=training, method="rf", trControl=fitControl)
rfModel
trellis.par.set(caretTheme())
plot(rfModel)
